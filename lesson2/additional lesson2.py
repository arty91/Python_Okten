'''
прога, що виводить кількість кожного символа з введеної строки,
  наприклад:
  st = 'as 23 fdfdg544' #введена строка
'''

# def func_string_to_el(s: str):
#     s_unique = list(dict.fromkeys(s))
#     for i in s_unique:
#         print(f'"{i}" -> {s.count(i)}')
#
#
# print(func_string_to_el('as 23 fdfdg544'))

'''
вивести послідовність Фібоначі, кількість вказана в знінній,
  наприклад: x = 10 -> 1 1 2 3 5 8 13 21 34 55
  (число з послідовності - це сума попередніх двох чисел)
'''

# def fibo_func(n: int) -> str:
#     ls, el1, el2 = [], 0, 1
#     for _ in range(n):
#         sum = el1 + el2
#         ls.append(str(el2))
#         el1 = el2
#         el2 = sum
#     return ' '.join(ls)
#
#
# print(fibo_func(10))

'''
порахувати кількість парних і непарних цифр числа, 
  наприклад: х = 225688 -> п = 5, н = 1;
         х = 33294 -> п = 2, н = 3
'''


# def count_num(num: int):
#     odd = sum(x % 2 != 0 for x in [int(x) for x in str(num)])
#     even = len(str(num)) - odd
#     return f'odd - {odd}, even - {even}'
#
#
# print(count_num(33294))

'''
генерируем лист с непарных чисел в порядке возрастания [1,3,5,7,9.....n]
задача сделать c него лист листов такого плана:

[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]  => [ [1], [3,5], [7,9,11], [13,15,17,19] ]
[1, 3, 5, 7, 9, 11] => [[1], [3, 5], [7, 9, 11]]
[1, 3, 5, 7, 9]  => [ [1], [3,5], [7,9]]
[1, 3, 5, 7, 9, 11, 13]  => [[1], [3, 5], [7, 9, 11], [13]]
'''



'''
// Дан массив целых чисел, найдите тот, который встречается нечетное количество раз.
// Всегда будет только одно целое число, которое встречается нечетное количество раз
//     [1,2,3,4,5,2,4,1,3] -> 5
'''


'''
//     Перевірити чи слово має в собі такі самі літери як і поеперднє слово.
//
//     ANAGRAM | MGANRAA -> true
// EXIT | AXET -> false
// GOOD | DOGO -> true
'''

'''
// Точная степень двойки
// Дано натуральное число N.
//     Выведите слово YES, если число N является точной степенью двойки, или слово NO в противном случае.
//     Операцией возведения в степень пользоваться нельзя!
'''



'''
//  Сумма цифр числа
// Дано натуральное число N. Вычислите сумму его цифр.
//     При решении этой задачи нельзя использовать строки,
//     списки, массивы ну и циклы, разумеется.
//     Рекурсія)
'''


'''
// Палиндром
// Дано слово, состоящее только из строчных латинских букв. Проверьте, является ли это слово палиндромом. Выведите YES или NO.
//     При решении этой задачи нельзя пользоваться циклами, в решениях на питоне нельзя использовать срезы с шагом, отличным от 1.
'''


'''
// Количество единиц
// Дана последовательность натуральных чисел  в строке, завершающаяся двумя числами 0 подряд.
// Определите, сколько раз в этой последовательности встречается число 1. Числа, идущие после двух нулей, необходимо игнорировать.
//
// 2176491947586100 -> 3
'''

'''
// Вирівняти багаторівневий масив в однорівневий
//     [1,3, ['Hello, 'Wordd', [9,6,1]], ['oops'], 9] -> [1, 3, 'Hello, 'Wordd', 9, 6, 1, 'oops', 9]
// flat використовувати заборонено.
'''


'''
// Знайти набільший елемент в масиві за допомогою reduce
//     [1,6,9,0,17,88,4,7] -> 88
'''